{"version":3,"file":"static/js/117.bbbe6d3d.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__KecCP\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__iT+0p\",\"loading\":\"NewCommentForm_loading__y8OnS\",\"control\":\"NewCommentForm_control__zdnFs\",\"actions\":\"NewCommentForm_actions__dfVfs\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__2yWYd\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__lG1qq\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No comments yet.</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__ALne4\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\r\nimport { Fragment } from 'react';\r\nimport { Link, Route, useParams, useRouteMatch } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const {\r\n    sendRequest,\r\n    data: loadedQuote,\r\n    status,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n    // return () => {\r\n    //   cleanup\r\n    // };\r\n  }, [sendRequest, quoteId]);\r\n\r\n  console.log(loadedQuote)\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered focused'>{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className='centered'>\r\n          <Link className='btn--flat' to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments></Comments>\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","author","match","useRouteMatch","getSingleQuote","loadedQuote","console","log","Fragment","path","exact","to","url"],"sourceRoot":""}